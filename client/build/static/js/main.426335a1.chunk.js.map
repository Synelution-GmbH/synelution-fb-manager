{"version":3,"sources":["services/auth-provider.js","ui/components/Loader.jsx","serviceWorker.js","router/scrollRestoration.jsx","ui/theme.js","App.jsx","index.js"],"names":["AuthContext","createContext","user","useAuth","useContext","setAxiosDefaults","axios","defaults","headers","common","window","localStorage","getItem","AuthProvider","props","useState","setUser","loading","setLoading","useEffect","auth","a","get","data","setTimeout","console","log","login","loginData","post","setItem","token","Provider","value","logout","removeItem","Loader","clone","bgcolor","container","style","height","color","position","top","opacity","visibility","transition","zIndex","justify","alignItems","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","withRouter","children","pathname","React","scrollTo","st","spacing","fontFamily","join","palette","fb","ig","theme","createMuiTheme","primary","main","secondary","themeIG","Theme","dateParams","useRouteMatch","document","body","backgroundColor","background","default","ThemeProvider","params","type","AuthenticatedApp","lazy","UnauthenticatedApp","App","fallback","CssBaseline","AuthSwitcher","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.426335a1.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Loader } from 'ui/components/Loader';\r\n\r\nconst AuthContext = createContext({ user: null });\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nconst setAxiosDefaults = () => {\r\n  axios.defaults.headers.common['Authorization'] = window.localStorage.getItem(\r\n    'token'\r\n  );\r\n};\r\n\r\nexport const AuthProvider = (props) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    setAxiosDefaults();\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (!window.localStorage.getItem('token')) {\r\n      return setLoading(false);\r\n    }\r\n    setAxiosDefaults();\r\n    auth();\r\n  }, []);\r\n\r\n  const auth = async () => {\r\n    try {\r\n      const { data } = await axios.get('/auth');\r\n      setUser(data);\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n      }, 200);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    window.localStorage.removeItem('token');\r\n    setUser(null);\r\n  };\r\n\r\n  const login = async (loginData) => {\r\n    try {\r\n      let { data } = await axios.post('/login', loginData);\r\n      window.localStorage.setItem('token', data.token);\r\n      setUser(data.user);\r\n      return data;\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Loader loading={loading} />\r\n      <AuthContext.Provider value={{ user, loading, logout, login }} {...props} />\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { CircularProgress, Box, Grid } from '@material-ui/core';\r\n\r\nexport const Loader = ({ loading }) => {\r\n  return (\r\n    <Box clone bgcolor=\"primary.main\">\r\n      <Grid\r\n        container\r\n        style={{\r\n          height: '100vh',\r\n          color: 'white',\r\n          position: 'fixed',\r\n          top: 0,\r\n          opacity: loading ? 1 : 0,\r\n          visibility: loading ? 'visible' : 'hidden',\r\n          transition: '0.5s',\r\n          zIndex: 10000,\r\n        }}\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n// import { urlBase64ToUint8Array } from './utils';\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const file =\r\n        process.env.NODE_ENV === 'production'\r\n          ? 'service-worker.js'\r\n          : 'custom-sw.js';\r\n\r\n      const swUrl = `${process.env.PUBLIC_URL}/${file}`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(async (registration) => {\r\n      // console.log('registering push');\r\n      // registration.pushManager\r\n      //   .subscribe({\r\n      //     userVisibleOnly: true,\r\n      //     applicationServerKey: urlBase64ToUint8Array(\r\n      //       'BODI-sL_suVRxxD-ek-DvGQ2yBNTa1pyKpdxpc2jrk_g1C3BJhhn56gNYRPkSKdx1E0k354xlu-v_29PnVEeGKU'\r\n      //     ),\r\n      //   })\r\n      //   .then((subscription) => {\r\n      //     console.log('Registered push');\r\n      //     console.log(subscription);\r\n      //     console.log('Sending push');\r\n      //     fetch('/subscription', {\r\n      //       method: 'POST',\r\n      //       body: JSON.stringify(subscription),\r\n      //       headers: {\r\n      //         'content-type': 'application/json',\r\n      //       },\r\n      //     });\r\n      //     console.log('Sent push');\r\n      //   })\r\n      //   .catch((e) => {\r\n      //     console.error(e);\r\n      //   });\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nconst ScrollRestoration = ({ children, location: { pathname } }) => {\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return children || null;\r\n};\r\n\r\nexport default withRouter(ScrollRestoration);\r\n","import React, { useEffect } from 'react';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { useRouteMatch } from 'react-router';\r\n\r\nconst st = {\r\n  spacing: 10,\r\n  fontFamily: [\r\n    'Roboto',\r\n    '\"Helvetica Neue\"',\r\n    'Arial',\r\n    'sans-serif',\r\n    '\"Apple Color Emoji\"',\r\n    '\"Segoe UI Emoji\"',\r\n    '\"Segoe UI Symbol\"',\r\n  ].join(','),\r\n  palette: {\r\n    // type: 'dark',\r\n    fb: 'linear-gradient(to right,#3578e5 0%,#2362c8 100%)',\r\n    ig: 'linear-gradient(-112deg,#5c0abf 0,#b0377b 100%)',\r\n  },\r\n};\r\nconst theme = createMuiTheme({\r\n  ...st,\r\n  palette: {\r\n    ...st.palette,\r\n    primary: {\r\n      main: '#2362c8',\r\n    },\r\n    secondary: {\r\n      main: '#ffe400',\r\n    },\r\n  },\r\n});\r\nconst themeIG = createMuiTheme({\r\n  ...st,\r\n  palette: {\r\n    ...st.palette,\r\n    primary: {\r\n      main: '#b0377b',\r\n    },\r\n    secondary: {\r\n      main: '#ffe400',\r\n    },\r\n  },\r\n});\r\n\r\nconsole.log(theme);\r\n\r\nexport const Theme = ({ children }) => {\r\n  let dateParams = useRouteMatch('/:client/posts/:type');\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = theme.palette.background.default;\r\n  }, []);\r\n  return (\r\n    <ThemeProvider\r\n      theme={dateParams && dateParams.params.type === 'ig' ? themeIG : theme}\r\n    >\r\n      {children}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","import React, { Suspense } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport 'scss/index.min.css';\r\n\r\nimport { AuthProvider, useAuth } from './services/auth-provider';\r\nimport ScrollRestoration from './router/scrollRestoration';\r\nimport { Theme } from 'ui/theme';\r\n\r\nconst AuthenticatedApp = React.lazy(() => import('./AuthenticatedApp'));\r\nconst UnauthenticatedApp = React.lazy(() => import('./UnauthenticatedApp'));\r\n\r\nexport const App = () => {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <CssBaseline />\r\n      <ScrollRestoration>\r\n        <Theme>\r\n          <AuthProvider>\r\n            <AuthSwitcher />\r\n          </AuthProvider>\r\n        </Theme>\r\n      </ScrollRestoration>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nconst AuthSwitcher = () => {\r\n  const { user } = useAuth();\r\n\r\n  return user ? <AuthenticatedApp /> : <UnauthenticatedApp />;\r\n};\r\n","// if you need it\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}